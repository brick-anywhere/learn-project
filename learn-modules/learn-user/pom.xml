<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>learn-modules</artifactId>
        <groupId>com.dll</groupId>
        <version>1.0.0</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>learn-user</artifactId>

    <properties>
        <java.version>1.8</java.version>
        <json.version>2.4</json.version>
    </properties>
    <dependencies>

        <!-- 公共实体类模块 -->
        <!--         <dependency> -->
        <!--             <groupId>com.zledu</groupId> -->
        <!--             <artifactId>zledu-config</artifactId> -->
        <!--         </dependency> -->
        <dependency>
            <groupId>com.dll</groupId>
            <artifactId>learn-common-spring-boot-starter</artifactId>
            <exclusions>
                <exclusion>
                    <artifactId>hutool-all</artifactId>
                    <groupId>cn.hutool</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>com.dll</groupId>
            <artifactId>learn-redis-spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>com.dll</groupId>
            <artifactId>learn-ribbon-spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>com.dll</groupId>
            <artifactId>learn-sentinel-spring-boot-starter</artifactId>
        </dependency>
        <!--Nacos配置中心设置 -->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>
        </dependency>
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
        </dependency>

        <!-- swagger -->
        <dependency>
            <groupId>com.dll</groupId>
            <artifactId>learn-swagger2-spring-boot-starter</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>

        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-registry-prometheus</artifactId>
        </dependency>
        <dependency>
            <groupId>net.sf.json-lib</groupId>
            <artifactId>json-lib</artifactId>
            <version>${json.version}</version>
            <classifier>jdk15</classifier>
        </dependency>
        <dependency>
            <groupId>net.minidev</groupId>
            <artifactId>json-smart</artifactId>
            <version>2.3</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.62</version>
            <scope>compile</scope>
        </dependency>
        <!--easyPoI 导入导出-->
        <!--        <dependency>-->
        <!--            <groupId>org.assertj</groupId>-->
        <!--            <artifactId>assertj-core</artifactId>-->
        <!--        </dependency>-->
        <!--        <dependency>-->
        <!--            <groupId>cn.afterturn</groupId>-->
        <!--            <artifactId>easypoi-base</artifactId>-->
        <!--            <version>3.2.0</version>-->
        <!--        </dependency>-->
        <!--        <dependency>-->
        <!--            <groupId>cn.afterturn</groupId>-->
        <!--            <artifactId>easypoi-web</artifactId>-->
        <!--            <version>3.2.0</version>-->
        <!--        </dependency>-->
        <!--        <dependency>-->
        <!--            <groupId>cn.afterturn</groupId>-->
        <!--            <artifactId>easypoi-annotation</artifactId>-->
        <!--            <version>3.2.0</version>-->
        <!--        </dependency>-->

        <!-- POI -->
        <!--        <dependency>-->
        <!--            <groupId>org.apache.poi</groupId>-->
        <!--            <artifactId>poi</artifactId>-->
        <!--            <version>RELEASE</version>-->
        <!--        </dependency>-->
        <!--        <dependency>-->
        <!--            <groupId>org.apache.poi</groupId>-->
        <!--            <artifactId>poi-ooxml</artifactId>-->
        <!--            <version>RELEASE</version>-->
        <!--        </dependency>-->
        <!--        <dependency>-->
        <!--            <groupId>org.apache.poi</groupId>-->
        <!--            <artifactId>poi-ooxml-schemas</artifactId>-->
        <!--            <version>RELEASE</version>-->
        <!--        </dependency>-->

        <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper</artifactId>
            <version>4.1.3</version>
        </dependency>
<!--        <dependency>-->
<!--            <groupId>com.zledu</groupId>-->
<!--            <artifactId>zledu-usercenter-client</artifactId>-->
<!--            <version>1.0.0</version>-->
<!--            <scope>compile</scope>-->
<!--        </dependency>-->
<!--        <dependency>-->
<!--            <groupId>com.zledu</groupId>-->
<!--            <artifactId>zledu-score-client</artifactId>-->
<!--            <version>1.0.0</version>-->
<!--        </dependency>-->
        <dependency>
            <groupId>cn.hutool</groupId>
            <artifactId>hutool-all</artifactId>
            <version>5.2.4</version>
        </dependency>
        <dependency>
          <groupId>com.dll</groupId>
            <artifactId>learn-swagger2-spring-boot-starter</artifactId>
            <version>1.0.0</version>
        </dependency>
        <!--        <dependency>-->
<!--            <groupId>com.zledu</groupId>-->
<!--            <artifactId>zledu-resource-client</artifactId>-->
<!--            <version>1.0.0</version>-->
<!--            <scope>compile</scope>-->
<!--        </dependency>-->
        <!--         <dependency> -->
        <!--             <groupId>com.zledu</groupId> -->
        <!--             <artifactId>zledu-rocketmq-produce</artifactId> -->
        <!--             <version>1.0.0</version> -->
        <!--         </dependency> -->
        <!--         <dependency> -->
        <!--             <groupId>com.zledu</groupId> -->
        <!--             <artifactId>zledu-rocketmq-consume</artifactId> -->
        <!--             <version>1.0.0</version> -->
        <!--         </dependency> -->
        <!--         <dependency> -->
        <!--             <groupId>com.zledu</groupId> -->
        <!--             <artifactId>zledu-rocketmq-common</artifactId> -->
        <!--             <version>1.0.0</version> -->
        <!--             <scope>compile</scope> -->
        <!--         </dependency> -->
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <configuration>
                    <imageName>${docker_images_prefix}${project.artifactId}-${js.env}</imageName>
                    <imageTags>
                        <imageTag>${project.version}</imageTag>
                        <imageTag>latest</imageTag>
                    </imageTags>
                    <forceTags>true</forceTags>
                    <baseImage>${docker.baseImage}</baseImage>
                    <volumes>${docker.volumes}</volumes>
                    <env>
                        <JAVA_OPTS>${docker.java.opts}</JAVA_OPTS>
                        <TZ>Asia/Shanghai</TZ>
                    </env>
                    <!--时区配置-->
                    <runs>
                        <run>ln -snf /usr/share/zoneinfo/$TZ /etc/localtime</run>
                        <run>echo $TZ > /etc/timezone</run>
                    </runs>
                    <entryPoint>["sh","-c","java $JAVA_OPTS ${docker.java.security.egd} -jar /${project.build.finalName}.jar"]
                    </entryPoint>
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <directory>${project.build.directory}</directory>
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                </configuration>
            </plugin>
        </plugins>
        <finalName>${project.artifactId}</finalName>
    </build>

</project>